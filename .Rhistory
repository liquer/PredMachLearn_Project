testing = adData[-inTrain,]
?gsub
grep(names(training,"^[lL]"))
grep(names("^[Ll]", names(training))
)
x <- names(training)
grep("^[Ll]", names(training))
m <- training[, grep("^[Ll]", names(training))]
m <- training[, grep("^IL", names(training))]
?preProcess
preProcess(m, thresh = 0.8)
m <- cbind(m, training$diagnosis)
names(m) <- c(names(m)[1:12], "diagnosis")
preProc <- preProcess(m[1:12,], thresh = 0.8)
preProc <- preProcess(m[, 1:12], thresh = 0.8)
modelnonPCA <- train(diagnosis~., data = m[,1:12], method = "glm")
modelnonPCA <- train(type~., data = m[,1:12], method = "glm")
modelnonPCA <- train(diagnosis~., data = m, method = "glm")
install.packages("e1071")
modelnonPCA <- train(diagnosis~., data = m, method = "glm")
modelnonPCA
preProc <- preProcess(m[, 1:12], thresh = 0.8, method = "pca")
trainIL <- predict(preProc, m[, 1:12])
modelPCA <- train(m$diagnosis, method = "glm", data=trainIL)
modelPCA <- train(m$diagnosis~., method = "glm", data=trainIL)
modelPCA
preProc
train(m$diagnosis~., data = m[,1:12], method = "glm")
install.packages("devtools")
install_github("slidify", "ramnathv")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidify", "ramnathv")
install_github("slidifyLibrary", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
library(datasets)
data(mtcars)
I(1)
I(0)
y <- mtcars$mpg
x <- mtcars$wt
z <- mtcars$cyl
y <- mtcars[mtcars$cyl == 4|mtcars$cyl == 8,]$mpg
x <- mtcars[mtcars$cyl == 4|mtcars$cyl == 8,]$wt
z <- mtcars[mtcars$cyl == 4|mtcars$cyl == 8,]$cyl
z <- factor(z)
data <- data.frame("mpg" = y, "wt" = x, "cyl" = z)
lm(mpg ~ wt + I(cyl == 2), data = data)
lm(mpg ~ wt + I(cyl == 1) + I(cyl == 2), data = data)
lm(mpg ~ wt + I(1 * (cyl == 1)) + I(1 * (cyl == 2)), data = data)
lm(mpg ~ I(1 * (cyl == 1)) + I(1 * (cyl == 2)), data = data)
summary(lm(mpg ~ ., data = data))$coef
summary(lm(mpg ~ wt + cyl, data = mtcars))$coef
lm(mpg ~ I(1 * (cyl == "4")) + I(1 * (cyl == "8")), data = data)
lm(mpg ~ wt + I(1 * (cyl == "4")) + I(1 * (cyl == "8")), data = data)
lm(mpg ~ wt + I(1 * (cyl == "4")), data = data)
lm(mpg ~ wt + I(1 * (cyl == "8")), data = data)
lm(mpg ~ cyl - 1, data = data)
lm(mpg ~ (cyl - 1) + wt, data = data)
summary(lm(mpg ~ cyl - 1, data = data))$coef
data$cyl[2]
factor(data$cyl[2])
summary(lm(mpg ~ cyl, data = data))$coef
summary(lm(mpg ~ wt + I(1 * (cyl == "4")), data = data))$coef
summary(lm(mpg ~ wt + I(1 * (cyl == "8")), data = data))$coef
34.059 - 28.040
y <- mtcars$mpg
x <- mtcars$wt
z <- mtcars$cyl
z <- factor(z)
data <- data.frame("mpg" = y, "wt" = x, "cyl" = z)
summary(lm(mpg ~ cyl, data = data))$coef
summary(lm(mpg ~ wt + cyl, data = data))$coef
summary(lm(mpg ~ cyl, data = data))$coef
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
?mtcars
?I
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
plot(fit)
fit <- lm(y~x,data=data.frame(x,y))
plot(fit)
data <- data.frame("x" = x, "y" = y)
fit <- lm(y ~ .,data = data)
plot(fit)
hatvalues(fit)
?dfbetas
dfbetas(fit)
data(mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
library(MASS)
data(shuttle)
head(shuttle)
fit <- lm(I(1 * (use == auto) ~ factor(wind), data = shuttle))
fit <- lm(I(1 * (use == "auto") ~ factor(wind), data = shuttle))
fit <- lm(I(1 * (use == "auto")) ~ factor(wind), data = shuttle))
fit <- lm(I(1 * (use == "auto")) ~ factor(wind), data = shuttle)
summary(fit)$coef
glmfit <- glm(I(1 * (use == "auto")) ~ factor(wind), family = "binomial")
glmfit <- glm(I(1 * (use == "auto")) ~ factor(wind), family = "binomial", data = shuttle)
summary(glmfit)
exp(glmfit)
exp(glmfit$coeff)
1.285714/1.032323
1.032323/1.285714
glmfit2 <- glm(shuttle$use ~ shuttle$wind, family = "binomial")
summary(glmfit2)
exp(glmfit2$coeff)
0.7777778/0.9686888
glmfit2 <- glm(I(1 * (shuttle$use=='auto')) ~ shuttle$wind, family = "binomial")
summary(glmfit2)
exp(glmfit2$coeff)
?exp
glmfit2 <- glm(I(1 * (shuttle$use=='auto')) ~ I(1 * (shuttle$wind == 'head')), family = "binomial")
summary(glmfit2)
exp(glmfit2$coeff)
glmfit3 <- glm(I(1 * (shuttle$use=='auto')) ~ I(1 * (shuttle$wind == 'head')) + shuttle$magn, family = "binomial")
summary(glmfit3)
exp(glmfit3$coeff)
summary(glm(I(1 * (shuttle$use=='noauto')) ~ I(1 * (shuttle$wind == 'head')) + shuttle$magn, family = "binomial"))
exp(glm(I(1 * (shuttle$use=='noauto')) ~ I(1 * (shuttle$wind == 'head')) + shuttle$magn, family = "binomial"))
exp(glm(I(1 * (shuttle$use=='noauto')) ~ I(1 * (shuttle$wind == 'head')) + shuttle$magn, family = "binomial")$coeff)
glmfit4 <- glm(1 - I(1 * (shuttle$use=='auto')) ~ I(1 * (shuttle$wind == 'head')) + shuttle$magn, family = "binomial")
summary(glmfit3)
summary(glmfit4)
exp(glmfit3$coeff)
exp(glmfit4$coeff)
glmfit4 <- glm(1 - I(1 * (shuttle$use=='auto')) ~ I(1 * (shuttle$wind == 'head')), family = "binomial")
summary(glmfit2)
summary(glmfit4)
data(InsectSprays)
julian
?julian
fit <- lm(I(log(count+1)) ~ factor(spray),data = InsectSprays)
exp(fit$coef)
exp(fit$coeff)
summary(fit)
fit <- lm(I(log(count+1)) ~ spray,data = InsectSprays)
summary(fit)
exp(fit$coeff)
1/1.061
1/1.0616285
exp(coef(fit))
summary(lm(I(log(count)) ~ spray,data = InsectSprays))
summary(lm(I(log(count+1)) ~ spray,data = InsectSprays))
summary(lm(I(log(count)) ~ I(1*(spray=='A'))+I(1*(spray=='B'))+I(1*(spray=='C'))+I(1*(spray=='D'))+I(1*(spray=='E'))+I(1*(spray=='F')),data = InsectSprays))
summary(lm(I(log(count+1)) ~ I(1*(spray=='A'))+I(1*(spray=='B'))+I(1*(spray=='C'))+I(1*(spray=='D'))+I(1*(spray=='E'))+I(1*(spray=='F')),data = InsectSprays))
0.11892/0.05912
0.05912/0.11892
exp(lm(I(log(count+1)) ~ I(1*(spray=='A'))+I(1*(spray=='B'))+I(1*(spray=='C'))+I(1*(spray=='D'))+I(1*(spray=='E'))+I(1*(spray=='F')),data = InsectSprays)$coef)
0.8878761/0.9425946
library(datasets)
data(shuttle)
library(MASS)
data(shuttle)
fit1 <- glm(data=shuttle,formula=I(1*(use=='auto'))~I(1-1*(wind=='head')),family='binomial')
fit1 <- glm(data=shuttle,formula=I(1*(use=='auto'))~I(1*(wind=='head'))+I(1*(wind=='tail')),family='binomial')
summary(fit1)
fit1 <- glm(data=shuttle,formula=I(1*(use=='auto'))~I(1*(wind=='head')),family='binomial')
summary(fit1)
exp(fit1$coef)
fit2 <- glm(data=shuttle,formula=I(1*(use=='auto'))~I(1*(wind=='head'))+magn,family='binomial')
summary(fit2)
exp(fit2$coef)
fit3 <- glm(data=shuttle,formula=I(1-1*(use=='auto'))~I(1*(wind=='head')),family='binomial')
summary(fit3)
data(InsectSprays)
fit4 <- lm(data=InsectSprays,formula=I(log(count+1))~I(1*(spray=='A')+I(1*(spray=='B')+I(1*(spray=='C')+I(1*(spray=='D')+I(1*(spray=='E')+I(1*(spray=='F')))
)
))
))))))))))))))))))
fit4 <- lm(data=InsectSprays,formula=I(log(count+1))~I(1*(spray=='A'))+I(1*(spray=='B'))+I(1*(spray=='C'))+I(1*(spray=='D'))+I(1*(spray=='E'))+I(1*(spray=='F')))
summary(fit4)
fit4 <- lm(data=InsectSprays,formula=I(log(count+1))~I(1*(spray=='A'))+I(1*(spray=='C'))+I(1*(spray=='D'))+I(1*(spray=='E'))+I(1*(spray=='F')))
summary(fit4)
exp(fit4$coef)
fit4 <- lm(data=InsectSprays,formula=I(log(count+1))~spray-1)
summary(fit4)
2.6967/2.7565
fit4 <- lm(data=InsectSprays,formula=count~spray-1)
summary(fit4)
14.500/15.333
1-14.500/15.333
fit4 <- glm(data=InsectSprays,formula=count~spray-1,family=poisson)
summary(fit4)
fit4$coef[1,1]/fit4$coef[2,1]
fit4$coef
fit4$coef[1]/fit4$coef[2]
fit4$coeff
t <- 1:72
t <- log(t)
fit5 <- glm(data=InsectSprays,formula=count~spray-1+offset(t),family=poisson)
summary(fit5)
fit6 <- glm(data=InsectSprays,formula=count~spray-1+offset(t+log(10)),family=poisson)
t2 <- t+log(10)
fit6 <- glm(data=InsectSprays,formula=count~spray-1+offset(t2),family=poisson)
summary(fit6)
fit6$coef - fit5$coef
log(10)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot <- 1
knot <- 0
xx <- (x > knot) * (x - knot)
xMat <- cbind(1,x,xx)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- CreateDataPartition(y=segmentationOriginal$Case)
library(kernlab)
install.packages("kernlab")
library(kernlab)
inTrain <- CreateDataPartition(y=segmentationOriginal$Case)
inTrain <- createDataPartition(y=segmentationOriginal$Case)
inTrain <- createDataPartition(y=segmentationOriginal$Case,list=FALSE)
train <- segmentationOriginal[inTrain,]
test <- segmentationOriginal[-inTrain,]
set.seed(125)
train <- segmentationOriginal[segmentationOriginal$Case == "Train"]
train <- segmentationOriginal[segmentationOriginal$Case == "Train",]
test <- segmentationOriginal[segmentationOriginal$Case == "Test",]
modelFit <- train(class~.,method="rpart",data=training)
modelFit <- train(class~.,method="rpart",data=train)
training <- as.matrix(train)
modelFit <- train(class~.,method="rpart",data=training)
modelFit <- train(Class~.,method="rpart",data=train)
plot(modelFit$finalModel,uniform=TRUE)
text(modelFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
text(modelFit$finalModel,use.n=TRUE,all=TRUE)
plot(modelFit$finalModel,uniform=TRUE)
text(modelFit$finalModel,use.n=TRUE,all=TRUE)
print(modelFit$finalModel)
predict(modelFit$finalModel,newdata=data.frame("FiberWidthCh1" = 8,"VarIntenCh4" = 100, "PerimStatusCh1"=2))
nd <- data.frame("FiberWidthCh1" = 8,"VarIntenCh4" = 100, "PerimStatusCh1"=2)
predict(modelFit$finalModel,newdata=nd)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modelFit <- train(Area~.,method="rpart",data=olive)
predict(modelFit$finalModel,newdata=newdata)
modelFit2 <- train(Area~.,method="rf",data=olive)
predict(modelFit2$finalModel,newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(SAheart)
fit <- lm(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial")
fit <- lm(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
fit <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family="binomial",data=trainSA)
modelfit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
predictionTrain <- predict(modelfit,trainSA)
predictionTest <- predict(modelfit,testSA)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predictionTrain)
missClass(testSA$chd,predictionTest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modelFit <- train(y~.,method="rf",data=vowel.train)
varImp(modelFit)
install.packages("gbm")
install.packages("lubridate")
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fit1 <- train(y~.,method="rf",data=vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
library(caret)
fit1 <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
fit2 <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
predrf <- predict(ft1, newdata = vowel.test)
predrf <- predict(fit1, newdata = vowel.test)
predgbm <- predict(fit2, newdata = vowel.test)
sum(vowel.test$y == predrf)
sum(vowel.test$y == predgbm)
277 / length(predrf)
277 / length(predgbm)
243 / length(predgbm)
sum(vowel.test$y == predrf & vowel.test$y == predgbm)
204 / length(predgbm)
set.seed(33833)
predrf <- predict(fit1, newdata = vowel.test)
fit1 <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
fit2 <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
predrf <- predict(fit1, newdata = vowel.test)
predgbm <- predict(fit2, newdata = vowel.test)
sum(vowel.test$y == predrf)
sum(vowel.test$y == predgbm)
sum(vowel.test$y == predrf & vowel.test$y == predgbm)
281/length(predgbm)
236/length(predgbm)
202/length(predgbm)
sum(vowel.test$y == predrf | vowel.test$y == predgbm)
315/length(predgbm)
predDF <- data.frame(predrf,predgbm,y=vowel.test$y)
comModFit <- train(y~.,method="gam",data=predDF)
combPred <- predict(comModFit,predDF)
sum(combPred == vowel.test$y)
sum(predgbm == predrf)
sum(predgbm == predrf)/length(predgbm)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1 <- train(diagnosis ~ ., method = "rf", data = training)
fit2 <- train(diagnosis ~ ., method = "gbm", data = training)
fit2 <- train(diagnosis ~ ., method = "gbm", data = training, verbose = FALSE)
fit3 <- train(diagnosis ~ ., method = "lda", data = training)
?trainControl
pred1 <- predict(fit1, newdata = testing)
pred2 <- predict(fit2, newdata = testing)
pred3 <- predict(fit3, newdata = testing)
predDF <- data.frame(pred1, pred2, pred3, "diagnosis" = testing$diagnosis)
predDF <- data.frame(pred1, pred2, "diagnosis" = testing$diagnosis)
predDF <- data.frame(pred1, pred2, pred3, "diagnosis" = testing$diagnosis)
combfit <- train(diagnosis ~ ., method = "rf", data = predDF)
combpred <- predict(combfit, newdata = predDF)
sum(combpred == testing$diagnosis)
sum(pred1 == testing$diagnosis)
sum(pred2 == testing$diagnosis)
sum(pred3 == testing$diagnosis)
sum(combpred == testing$diagnosis)/length(testing$diagnosis)
?train
?rf
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
require(devtools)
install_version(AppliedPredictiveModeling, "1.1.6")
install_version(AppliedPredictiveModeling, "v1.1.6")
install_version("AppliedPredictiveModeling", "v1.1.6")
install_version("caret", "v6.0.47")
install_version("caret", "6.0.47")
?version
version(caret)
info(caret)
library(devtools)
?install_version
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
pred1 <- train(diagnosis ~ ., method = "rf", data = training)
pred1 <- train(diagnosis ~ ., method = "gbm", data = training, verbose=FALSE)
pred1 <- train(diagnosis ~ ., method = "rf", data = training)
pred2 <- train(diagnosis ~ ., method = "gbm", data = training, verbose=FALSE)
pred3 <- train(diagnosis ~ ., method = "lda", data = training)
fit1 <- pred1
fit2 <- pred2
fit3 <- pred3
pred1 <- predict(fit1, newdata = testing)
pred2 <- predict(fit2, newdata = testing)
pred3 <- predict(fit3, newdata = testing)
cpred <- data.frame(pred1, pred2, pred3, diagnosis = testing$diagnosis)
cfit <- train(diagnosis ~ ., method = "rf", data = cpred)
pred <- predict(cfit, newdata = cpred)
sum(pred == testing$diagnosis)
sum(pred1 == testing$diagnosis)
sum(pred2 == testing$diagnosis)
sum(pred3 == testing$diagnosis)
65/length(testing$diagnosis)
cfit <- train(diagnosis ~ ., method = "rf", data = cpred, prox = TRUE)
pred <- predict(cfit, newdata = cpred)
sum(pred == testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?lasso
fit <- train(CompressiveStrength ~ ., method = "lasso", data = training)
?plot.enet
plot.enet(fit, xvar = "penalty")
?elasticnet
install.packages("elasticnet")
library(elasticnet)
?elasticnet
?enet
fit <- enet(training[,1:8], training$CompressiveStrength, lambda = 0)
fit <- train(CompressiveStrength ~ ., method = "lasso", data = training)
pred <- predict(fit, newdata = testing)
obj <- enet(fit, pred, lambda = 0)
obj <- enet(testing[,1:8], pred, lambda = 0)
obj <- enet(as.matrix(training[,1:8]), training$CompressiveStrength, lambda = 0)
plot(obj)
data <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
?download.file
setInternet2(TRUE)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", "gaData.csv", method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", "gaData.csv", method = "auto")
data <- read.csv("gaData.csv")
library(lubridate)
training = data[year(data$date) < 2012,]
testing = data[(year(data$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
?bats
forec <- bats(training)
forec <- bats(training$x)
head(training)
tail(training)
forec <- bats(training[,2:3])
forec <- bats(training$visitsTumblr)
fit <- forec
fcast <- forecast(fit)
plot(fcast)
accuracy(fcast, testing$visitsTumblr)
?accuracy
summary(fcast)
?forecast
forecast(fit, h = 235, level = 95)
fcast <- forecast(fit, h = 235, level = 95)
accuracy(fcast, testing$visitsTumblr)
fcast[Lo 95]
fcast$upper
sum(testing$visitsTumblr < fcast$upper)
226/235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
fit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict(fit, testing)
accuracy(pred, testing$CompressiveStrength)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
class(vowel.train$y)
class(vowel.train$y) <- "factor"
vowel.train$y <- factor(vowel.train$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
library(caret)
fit <- train(y ~ ., method = "rf", data = vowel.train)
pred <- predict(fit, vowel.test)
sum(pred, vowel.test$y)
sum(pred == vowel.test$y)
sum(pred == vowel.test$y) / length(vowel.test$y)
setwd("E:/liquer@github/PredMachLearn_Project")
load("E:/liquer@github/PredMachLearn_Project/.RData")
confuMatrix1
confuMatrix2
install.packages("doParallel")
load("E:/liquer@github/PredMachLearn_Project/.RData")
rawdata <- read.csv("pml-training.csv")
load("E:/liquer@github/PredMachLearn_Project/.RData")
rawdata <- read.csv("pml-training.csv")
rawtesting <- read.csv("pml-testing.csv")
save.image("E:/liquer@github/PredMachLearn_Project/.RData")
load("E:/liquer@github/PredMachLearn_Project/.RData")
?str
